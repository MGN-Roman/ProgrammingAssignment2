makeCacheMatrix <- function(mx = matrix())
{
mx_inv <- NULL
set <- function(mx2) {
mx <<- mx2
mx_inv <<- NULL
}
get <- function() {
mx
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(mx, ..., silent = TRUE) {
mx_inv <- mx$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- mx$get()
mx_inv <- solve(data, ...)
mx$setinv(mx_inv)
mx_inv
}
mx<-matrix(1:8, ncol=3,nrow=3)
mx_c<-makeCacheMatrix(mx)
cacheSolve(mx_c)
cacheSolve(mx_c)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(mx2) {
mx <<- mx2
mx_inv <<- NULL
}
get <- function() {
mx
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ..., silent = TRUE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- mx$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- mx$get()
mx_inv <- solve(data, ...)
mx$setinv(mx_inv)
mx_inv
}
mx<-matrix(1:8, ncol=3,nrow=3)
mx_c<-makeCacheMatrix(mx)
cacheSolve(mx_c)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(mx2) {
mx <<- mx2
mx_inv <<- NULL
}
get <- function() {
mx
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##
cacheSolve <- function(x, ..., silent = TRUE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- mx$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- mx$get()
mx_inv <- solve(data, ...)
mx$setinv(mx_inv)
mx_inv
}
my_matrix<-matrix(1:8, ncol=3,nrow=3)
mx_object<-makeCacheMatrix(my_matrix)
cacheSolve(mx_object)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(mx2) {
mx <<- mx2
mx_inv <<- NULL
}
get <- function() {
mx
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##
cacheSolve <- function(x, ..., silent = TRUE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- x$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- x$get()
mx_inv <- solve(data, ...)
x$setinv(mx_inv)
mx_inv
}
my_matrix<-matrix(1:8, ncol=3,nrow=3)
mx_object<-makeCacheMatrix(my_matrix)
cacheSolve(mx_object)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(mx2) {
x <<- mx2
mx_inv <<- NULL
}
get <- function() {
x
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##
cacheSolve <- function(x, ..., silent = TRUE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- x$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- x$get()
mx_inv <- solve(data, ...)
x$setinv(mx_inv)
mx_inv
}
my_matrix<-matrix(1:8, ncol=3,nrow=3)
mx_object<-makeCacheMatrix(my_matrix)
cacheSolve(mx_object)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(mx2) {
x <<- mx2
mx_inv <<- NULL
}
get <- function() {
x
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
##
cacheSolve <- function(x, ..., silent = FALSE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- x$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- x$get()
mx_inv <- solve(data, ...)
x$setinv(mx_inv)
mx_inv
}
my_matrix<-matrix(1:8, ncol=3,nrow=3)
mx_object<-makeCacheMatrix(my_matrix)
cacheSolve(mx_object)
cacheSolve(mx_object)
makeCacheMatrix <- function(x = matrix()) {
mx_inv <- NULL
set <- function(new_matrix) {
x <<- new_matrix
mx_inv <<- NULL
}
get <- function() {
x
}
setinv <- function(inv_mx){
mx_inv <<- inv_mx
}
getinv <- function() {
mx_inv
}
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## If you make "smthn <- makeCacheMatrix(my_matrix)" and then call "cacheSolve(smthn)"
## this function will return the inverse of  "my_matrix" matrix.
## If you call "cacheSolve(smthn)" for the first time the function calculates the
## inverse of "my_matrix" matrix and puts it in cach. Next time you call "cacheSolve(smthn)"
## it returns the inverse of "my_matrix" from cach. If "my_matrix" was changed you have to do
## "smthn <- makeCacheMatrix(my_matrix)" action again and then call "cacheSolve(smthn)"
cacheSolve <- function(x, ..., silent = FALSE) {
## Return a matrix that is the inverse of 'x'
mx_inv <- x$getinv()
if(!is.null(mx_inv)) {
if (!silent) {message("getting cached data...")}
return(mx_inv)
}
if (!silent) {message("no cached data. solving...")}
data <- x$get()
mx_inv <- solve(data, ...)
x$setinv(mx_inv)
mx_inv
}
my_matrix<-matrix(1:8, ncol=3,nrow=3)
mx_object<-makeCacheMatrix(my_matrix)
cacheSolve(mx_object)
